
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."artists" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "main_instrument" "text" NOT NULL,
    "alt_instruments" "text"[]
);

ALTER TABLE "public"."artists" OWNER TO "postgres";

ALTER TABLE "public"."artists" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."artists_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."pending_artists" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "main_instrument" "text" NOT NULL,
    "submitted_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid" NOT NULL,
    "video_id" "uuid",
    "role" "text",
    "status" "text" DEFAULT 'pending'::"text",
    "notes" "text",
    "approved_artist_id" bigint,
    CONSTRAINT "pending_artists_role_check" CHECK (("role" = ANY (ARRAY['main'::"text", 'accompanying'::"text"]))),
    CONSTRAINT "pending_artists_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'approved'::"text", 'rejected'::"text", 'merged'::"text"])))
);

ALTER TABLE "public"."pending_artists" OWNER TO "postgres";

ALTER TABLE "public"."pending_artists" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pending_artists_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone,
    "username" "text",
    "full_name" "text",
    "avatar_url" "text",
    "website" "text",
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."raga_bookmarks" (
    "user_id" "uuid" NOT NULL,
    "raga_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."raga_bookmarks" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."raga_comment_votes" (
    "comment_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "value" integer NOT NULL,
    CONSTRAINT "vote_quantity" CHECK ((("value" <= 1) AND ("value" >= '-1'::integer)))
);

ALTER TABLE "public"."raga_comment_votes" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."raga_comments" (
    "comment_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "raga_id" bigint NOT NULL,
    "parent_comment_id" "uuid",
    "content" "text",
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL
);

ALTER TABLE "public"."raga_comments" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."raga_video_artists" (
    "video_id" "uuid" NOT NULL,
    "artist_id" integer NOT NULL,
    "role" "text",
    "instrument" "text" NOT NULL,
    CONSTRAINT "raga_video_artists_role_check" CHECK (("role" = ANY (ARRAY['main'::"text", 'accompanying'::"text"])))
);

ALTER TABLE "public"."raga_video_artists" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."raga_video_favourites" (
    "user_id" "uuid" NOT NULL,
    "video_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."raga_video_favourites" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."raga_video_votes" (
    "video_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "value" integer NOT NULL,
    CONSTRAINT "vote_quantity" CHECK ((("value" <= 1) AND ("value" >= '-1'::integer)))
);

ALTER TABLE "public"."raga_video_votes" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."raga_videos" (
    "video_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "raga_id" integer NOT NULL,
    "video_url" "text",
    "youtube_video_id" "text",
    "created_at" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."raga_videos" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."ragas" (
    "id" bigint NOT NULL,
    "format_name" "text",
    "name" "text",
    "melakarta" integer,
    "melakarta_name" "text",
    "chakra" "text",
    "arohanam" "text",
    "avarohanam" "text",
    "aliases" "text" DEFAULT ''::"text",
    "is_janaka" boolean,
    "is_janya" boolean,
    "is_vakra" boolean,
    "is_bashanga" boolean,
    "is_upanga" boolean
);

ALTER TABLE "public"."ragas" OWNER TO "postgres";

ALTER TABLE ONLY "public"."artists"
    ADD CONSTRAINT "artists_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."pending_artists"
    ADD CONSTRAINT "pending_artists_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");

ALTER TABLE ONLY "public"."raga_bookmarks"
    ADD CONSTRAINT "raga_bookmarks_pkey" PRIMARY KEY ("user_id", "raga_id");

ALTER TABLE ONLY "public"."raga_comment_votes"
    ADD CONSTRAINT "raga_comment_votes_pkey" PRIMARY KEY ("comment_id", "user_id");

ALTER TABLE ONLY "public"."raga_comments"
    ADD CONSTRAINT "raga_comments_pkey" PRIMARY KEY ("comment_id");

ALTER TABLE ONLY "public"."raga_video_artists"
    ADD CONSTRAINT "raga_video_artists_pkey" PRIMARY KEY ("video_id", "artist_id");

ALTER TABLE ONLY "public"."raga_video_favourites"
    ADD CONSTRAINT "raga_video_favourites_pkey" PRIMARY KEY ("user_id", "video_id");

ALTER TABLE ONLY "public"."raga_video_votes"
    ADD CONSTRAINT "raga_video_votes_pkey" PRIMARY KEY ("video_id", "user_id");

ALTER TABLE ONLY "public"."raga_videos"
    ADD CONSTRAINT "raga_videos_pkey" PRIMARY KEY ("video_id");

ALTER TABLE ONLY "public"."ragas"
    ADD CONSTRAINT "ragas_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."pending_artists"
    ADD CONSTRAINT "pending_artists_approved_artist_id_fkey" FOREIGN KEY ("approved_artist_id") REFERENCES "public"."artists"("id");

ALTER TABLE ONLY "public"."pending_artists"
    ADD CONSTRAINT "pending_artists_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."pending_artists"
    ADD CONSTRAINT "pending_artists_video_id_fkey" FOREIGN KEY ("video_id") REFERENCES "public"."raga_videos"("video_id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_bookmarks"
    ADD CONSTRAINT "raga_bookmarks_raga_id_fkey" FOREIGN KEY ("raga_id") REFERENCES "public"."ragas"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_bookmarks"
    ADD CONSTRAINT "raga_bookmarks_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_comment_votes"
    ADD CONSTRAINT "raga_comment_votes_comment_id_fkey" FOREIGN KEY ("comment_id") REFERENCES "public"."raga_comments"("comment_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_comment_votes"
    ADD CONSTRAINT "raga_comment_votes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_comments"
    ADD CONSTRAINT "raga_comments_parent_comment_id_fkey" FOREIGN KEY ("parent_comment_id") REFERENCES "public"."raga_comments"("comment_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_comments"
    ADD CONSTRAINT "raga_comments_raga_id_fkey" FOREIGN KEY ("raga_id") REFERENCES "public"."ragas"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_comments"
    ADD CONSTRAINT "raga_comments_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_video_artists"
    ADD CONSTRAINT "raga_video_artists_artist_id_fkey" FOREIGN KEY ("artist_id") REFERENCES "public"."artists"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_video_artists"
    ADD CONSTRAINT "raga_video_artists_video_id_fkey" FOREIGN KEY ("video_id") REFERENCES "public"."raga_videos"("video_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_video_favourites"
    ADD CONSTRAINT "raga_video_favourites_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_video_favourites"
    ADD CONSTRAINT "raga_video_favourites_video_id_fkey" FOREIGN KEY ("video_id") REFERENCES "public"."raga_videos"("video_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_video_votes"
    ADD CONSTRAINT "raga_video_votes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_video_votes"
    ADD CONSTRAINT "raga_video_votes_video_id_fkey" FOREIGN KEY ("video_id") REFERENCES "public"."raga_videos"("video_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_videos"
    ADD CONSTRAINT "raga_videos_raga_id_fkey" FOREIGN KEY ("raga_id") REFERENCES "public"."ragas"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."raga_videos"
    ADD CONSTRAINT "raga_videos_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;

CREATE POLICY "Artists are viewable by everyone." ON "public"."artists" FOR SELECT USING (true);

CREATE POLICY "Comments are viewable by everyone." ON "public"."raga_comments" FOR SELECT USING (true);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."raga_video_favourites" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."raga_video_favourites" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for users based on user_id" ON "public"."raga_video_favourites" FOR INSERT WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."raga_video_favourites" FOR SELECT USING (true);

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Ragas are viewable by everyone." ON "public"."ragas" FOR SELECT USING (true);

CREATE POLICY "Users can delete their own Videos." ON "public"."raga_videos" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can delete their own bookmarks." ON "public"."raga_bookmarks" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can delete their own comments." ON "public"."raga_comments" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can delete their own video votes." ON "public"."raga_video_votes" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can delete their own votes." ON "public"."raga_comment_votes" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert their own Videos" ON "public"."raga_videos" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert their own bookmarks" ON "public"."raga_bookmarks" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert their own comments" ON "public"."raga_comments" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Users can insert their own video votes" ON "public"."raga_video_votes" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert their own votes" ON "public"."raga_comment_votes" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));

CREATE POLICY "Users can update their own Videos." ON "public"."raga_videos" FOR UPDATE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can update their own comments." ON "public"."raga_comments" FOR UPDATE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can update their own video votes." ON "public"."raga_video_votes" FOR UPDATE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can update their own votes." ON "public"."raga_comment_votes" FOR UPDATE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can view their own bookmarks" ON "public"."raga_bookmarks" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Video Votes are viewable by everyone." ON "public"."raga_video_votes" FOR SELECT USING (true);

CREATE POLICY "Videos are viewable by everyone." ON "public"."raga_videos" FOR SELECT USING (true);

CREATE POLICY "Votes are viewable by everyone." ON "public"."raga_comment_votes" FOR SELECT USING (true);

ALTER TABLE "public"."artists" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."raga_bookmarks" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."raga_comment_votes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."raga_comments" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."raga_video_favourites" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."raga_video_votes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."raga_videos" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ragas" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."artists" TO "anon";
GRANT ALL ON TABLE "public"."artists" TO "authenticated";
GRANT ALL ON TABLE "public"."artists" TO "service_role";

GRANT ALL ON SEQUENCE "public"."artists_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."artists_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."artists_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."pending_artists" TO "anon";
GRANT ALL ON TABLE "public"."pending_artists" TO "authenticated";
GRANT ALL ON TABLE "public"."pending_artists" TO "service_role";

GRANT ALL ON SEQUENCE "public"."pending_artists_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pending_artists_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pending_artists_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."raga_bookmarks" TO "anon";
GRANT ALL ON TABLE "public"."raga_bookmarks" TO "authenticated";
GRANT ALL ON TABLE "public"."raga_bookmarks" TO "service_role";

GRANT ALL ON TABLE "public"."raga_comment_votes" TO "anon";
GRANT ALL ON TABLE "public"."raga_comment_votes" TO "authenticated";
GRANT ALL ON TABLE "public"."raga_comment_votes" TO "service_role";

GRANT ALL ON TABLE "public"."raga_comments" TO "anon";
GRANT ALL ON TABLE "public"."raga_comments" TO "authenticated";
GRANT ALL ON TABLE "public"."raga_comments" TO "service_role";

GRANT ALL ON TABLE "public"."raga_video_artists" TO "anon";
GRANT ALL ON TABLE "public"."raga_video_artists" TO "authenticated";
GRANT ALL ON TABLE "public"."raga_video_artists" TO "service_role";

GRANT ALL ON TABLE "public"."raga_video_favourites" TO "anon";
GRANT ALL ON TABLE "public"."raga_video_favourites" TO "authenticated";
GRANT ALL ON TABLE "public"."raga_video_favourites" TO "service_role";

GRANT ALL ON TABLE "public"."raga_video_votes" TO "anon";
GRANT ALL ON TABLE "public"."raga_video_votes" TO "authenticated";
GRANT ALL ON TABLE "public"."raga_video_votes" TO "service_role";

GRANT ALL ON TABLE "public"."raga_videos" TO "anon";
GRANT ALL ON TABLE "public"."raga_videos" TO "authenticated";
GRANT ALL ON TABLE "public"."raga_videos" TO "service_role";

GRANT ALL ON TABLE "public"."ragas" TO "anon";
GRANT ALL ON TABLE "public"."ragas" TO "authenticated";
GRANT ALL ON TABLE "public"."ragas" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
